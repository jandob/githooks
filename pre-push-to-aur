#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

set -e
remote="$1"
url="$2"

while read local_ref local_sha remote_ref remote_sha
do
    if echo $local_ref | grep "refs/tags/"; then
        tag="${local_ref#refs/tags/v}"
        pkgname=$(sed -n 's/pkgname=\(.*\)/\1/p' PKGBUILD)
        echo "publishing version $tag to aur..."
        sed -i "s/pkgver=auto/pkgver=${tag}/" PKGBUILD
        sed -i "s/pkgrel=.*/pkgrel=1/" PKGBUILD
        git add PKGBUILD
        ! git commit -m 'automatic update PKGBUILD version to tagged version'

        (
        temp_dir=$(mktemp -d)
        git_directory="$GIT_WORK_TREE"
        unset GIT_WORK_TREE
        pushd "$temp_dir"
        git clone ssh://aur@aur.archlinux.org/"$pkgname".git .
        cp "$git_directory"/PKGBUILD .
        mksrcinfo
        git add .
        git commit -m "automatic update from github"
        git push
        popd
        rm -rf "$temp_dir"
        )
    fi
done

exit 0
